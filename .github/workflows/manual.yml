name: manual.yml

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      # 2. JDK 17 환경 설정
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17.0.13'
      
      # 3. application.yml 추가
      - name: add application.yml
        run: |
          chmod -R 777 src/main
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
      
      # 4. Spring Boot 애플리케이션 빌드 (수정됨)
      - name: Build Spring Boot Application
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test
          # 빌드 결과 확인
          ls -la build/libs/
      
      # 5. Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t 55ooyeon/status-server:${{ github.sha }} -f Dockerfile .
      
      # 6. Docker Hub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      # 7. Docker 이미지 푸시
      - name: Push Docker Image
        run: docker push 55ooyeon/status-server:${{ github.sha }}
      
      # 8. EC2에 배포 (수정됨)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker pull 55ooyeon/status-server:${{ github.sha }}
            docker stop status-server || true
            docker rm status-server || true
            docker run -d --name status-server -p 8080:8080 55ooyeon/status-server:${{ github.sha }}
